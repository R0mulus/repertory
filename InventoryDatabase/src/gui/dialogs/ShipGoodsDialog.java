/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package gui.dialogs;

import database.ConnectionProvider;
import errorChecking.InputCheck;
import inventorydatabase.Customer;
import inventorydatabase.Goods;
import inventorydatabase.Shipper;
import java.awt.Dimension;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author Joseph
 */
public class ShipGoodsDialog extends javax.swing.JDialog {

    private List<Customer> customers;
    private List<Shipper> shippers;
    private int customerID;
    private int shipperID;
    private int userID;
    private List<Goods> goods;
    
    public ShipGoodsDialog(java.awt.Frame parent, boolean modal, int userID, List<Goods> goods) {
        super(parent, modal);
        initComponents();
        this.goods = goods;
        this.userID = userID;
        fillTable();
        hideColumn(4);
        fillCustomers();
        cmbCustomer.setPreferredSize(new Dimension(150,25));
        fillShippers();
        cmbShipper.setPreferredSize(new Dimension(150,25));
        setLocationRelativeTo(null);
        setTitle("Shipping goods");
        setResizable(false);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableGoods = new javax.swing.JTable();
        lblCustomerWarning = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        cmbCustomer = new javax.swing.JComboBox<>();
        lblCustomerName = new javax.swing.JLabel();
        lblCustomerPhone = new javax.swing.JLabel();
        lblCustomerEmail = new javax.swing.JLabel();
        cmbShipper = new javax.swing.JComboBox<>();
        lblShipperName = new javax.swing.JLabel();
        lblShipperPhone = new javax.swing.JLabel();
        lblShipperEmail = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        lblShipperWarning = new javax.swing.JLabel();
        btnConfirm = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        lblGoodsQuantityWarning = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel2.setText("Shipping Goods");

        tableGoods.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Code", "Quantity", "Price per unit", "id"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, true, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableGoods);

        lblCustomerWarning.setForeground(new java.awt.Color(255, 0, 0));
        lblCustomerWarning.setText(" ");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel8.setText("Customer");

        cmbCustomer.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose" }));
        cmbCustomer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCustomerActionPerformed(evt);
            }
        });

        lblCustomerName.setText("Name: ");

        lblCustomerPhone.setText("Phone: ");

        lblCustomerEmail.setText("Email:");

        cmbShipper.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Choose" }));
        cmbShipper.setMaximumSize(new java.awt.Dimension(200, 300));
        cmbShipper.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbShipperActionPerformed(evt);
            }
        });

        lblShipperName.setText("Name: ");

        lblShipperPhone.setText("Phone: ");

        lblShipperEmail.setText("Email: ");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel9.setText("Shipper");

        lblShipperWarning.setForeground(new java.awt.Color(255, 0, 0));
        lblShipperWarning.setText(" ");

        btnConfirm.setText("Confirm");
        btnConfirm.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnConfirm.setMaximumSize(new java.awt.Dimension(70, 23));
        btnConfirm.setMinimumSize(new java.awt.Dimension(70, 23));
        btnConfirm.setPreferredSize(new java.awt.Dimension(70, 23));
        btnConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConfirmActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        lblGoodsQuantityWarning.setForeground(new java.awt.Color(255, 0, 0));
        lblGoodsQuantityWarning.setText(" ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(47, 47, 47)
                .addComponent(btnCancel, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(280, 280, 280))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lblGoodsQuantityWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 411, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addGap(28, 28, 28)
                                .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblCustomerPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerName, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblCustomerWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblShipperWarning, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblShipperPhone, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblShipperName, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(34, 34, 34)
                                .addComponent(cmbShipper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(lblShipperEmail, javax.swing.GroupLayout.PREFERRED_SIZE, 216, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap(98, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 284, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(13, 13, 13)
                        .addComponent(lblGoodsQuantityWarning))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(lblCustomerName)
                                .addGap(18, 18, 18)
                                .addComponent(lblCustomerPhone)
                                .addGap(25, 25, 25)
                                .addComponent(lblCustomerEmail))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(jLabel8)
                                .addComponent(cmbCustomer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(7, 7, 7)
                        .addComponent(lblCustomerWarning)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel9)
                                    .addComponent(cmbShipper, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(111, 111, 111))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(35, 35, 35)
                                .addComponent(lblShipperName)
                                .addGap(18, 18, 18)
                                .addComponent(lblShipperPhone)
                                .addGap(25, 25, 25)
                                .addComponent(lblShipperEmail)))
                        .addComponent(lblShipperWarning)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnConfirm, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCancel))
                .addGap(43, 43, 43))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void fillCustomers(){
        customers = new ConnectionProvider().getCustomers();
        if(customers != null && customers.size() > 0){
            for(Customer customer : customers){
                String item = customer.getName();
                cmbCustomer.addItem(item);
            }
        }
    }
    
    private void fillShippers(){
        shippers = new ConnectionProvider().getShippers();
        if(shippers != null && shippers.size() > 0){
            for(Shipper shipper : shippers){
                String item = shipper.getName();
                cmbShipper.addItem(item);
            }
        }
    }
    
    private void hideColumn(int columnIndex){
        TableColumn tableColumnID = tableGoods.getColumnModel().getColumn(columnIndex);
        tableColumnID.setMinWidth(0);
        tableColumnID.setMaxWidth(0);
        tableColumnID.setWidth(0);
    }
    
    private void fillTable(){
        DefaultTableModel model = (DefaultTableModel) tableGoods.getModel();

        int rowCount = model.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            model.removeRow(i);
        }
        
        for (Goods tempGoods : goods) {
            Object[] o = new Object[5];
            o[0] = tempGoods.getName();
            o[1] = tempGoods.getCode();
            o[2] = tempGoods.getQuantity();
            o[3] = tempGoods.getPricePerUnit();
            o[4] = tempGoods.getId();
            model.addRow(o);
        }
    }
    
    private void cmbCustomerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCustomerActionPerformed
        int index = cmbCustomer.getSelectedIndex();
        lblCustomerName.setText("Name: ");
        lblCustomerPhone.setText("Phone: ");
        lblCustomerEmail.setText("Email: ");
        if (index > 0) {
            Customer selectedCustomer = customers.get(index - 1);
            customerID = selectedCustomer.getId();
            Customer customer = new ConnectionProvider().getCustomerByID(customerID);
            lblCustomerName.setText("Name: " + customer.getName());
            lblCustomerPhone.setText("Phone: " + customer.getPhoneNum());
            lblCustomerEmail.setText("Email: " + customer.getEmail());
        }
    }//GEN-LAST:event_cmbCustomerActionPerformed

    private void cmbShipperActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbShipperActionPerformed
        int index = cmbShipper.getSelectedIndex();
        lblShipperName.setText("Name: ");
        lblShipperPhone.setText("Phone: ");
        lblShipperEmail.setText("Email: ");
        if (index > 0) {
            Shipper selectedShipper = shippers.get(index - 1);
            shipperID = selectedShipper.getId();
            Shipper shipper = new ConnectionProvider().getShipperByID(shipperID);
            lblShipperName.setText("Name: " + shipper.getName());
            lblShipperPhone.setText("Phone: " + shipper.getPhoneNum());
            lblShipperEmail.setText("Email: " + shipper.getEmail());
        }
    }//GEN-LAST:event_cmbShipperActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConfirmActionPerformed
        int customerIndex = cmbCustomer.getSelectedIndex();
        int shipperIndex = cmbShipper.getSelectedIndex();
        String quantity = "-1";
        int selectedTableGoodsID = -1;
        int quantityFromTable = 0;
        int[] correctInputs = new int[4];
        InputCheck inputCheck = new InputCheck();
        
        if(tableGoods.getSelectionModel().isSelectionEmpty()){
            lblGoodsQuantityWarning.setText("Goods not selected!");
            correctInputs[3] = 0;
        }else{
            quantity = tableGoods.getValueAt(tableGoods.getSelectedRow(), 2).toString();
            selectedTableGoodsID = Integer.parseInt(tableGoods.getValueAt(tableGoods.getSelectedRow(), 4).toString());
            lblGoodsQuantityWarning.setText(" ");
            correctInputs[3] = 1;
        }
        
        int realQuantity = findRealQuantityOfGoods(selectedTableGoodsID);
        
        if(!inputCheck.isInt(quantity)){
            lblGoodsQuantityWarning.setText("Only numbers are allowed!");
            correctInputs[0] = 0;
        }else{
            quantityFromTable = Integer.parseInt(quantity);
            if(quantityFromTable > realQuantity){
                lblGoodsQuantityWarning.setText("Not enough goods in stock!");
                correctInputs[0] = 0;
            }else if(quantityFromTable == 0 || quantityFromTable <= 0){
                lblGoodsQuantityWarning.setText("Incorrect input!");
                correctInputs[0] = 0; 
            }else{
                lblGoodsQuantityWarning.setText(" ");
                correctInputs[0] = 1;
            }
        }
        
        if(customerIndex <= 0){
            lblCustomerWarning.setText("Choose customer!");
            correctInputs[1] = 0;
        }else{
            lblCustomerWarning.setText(" ");
            correctInputs[1] = 1;
        }
        
        if(shipperIndex <= 0){
            lblShipperWarning.setText("Choose shipper!");
            correctInputs[2] = 0;
        }else{
            lblShipperWarning.setText(" ");
            correctInputs[2] = 1;
        }
        
        int sum = 0;
        for(int a : correctInputs){
            sum += a;
        }
        if(sum == 4){
            ConnectionProvider conn = new ConnectionProvider();
            conn.updateGoodsQuantity(selectedTableGoodsID, quantityFromTable, '-');
            int idExpedition = conn.addNewExpedition(customerID, shipperID, userID);
            conn.addExpeditionDetails(idExpedition, selectedTableGoodsID, quantityFromTable);
            JOptionPane.showMessageDialog(null, "Expedition completed!\nGood shipped!");
            dispose();
        }
    }//GEN-LAST:event_btnConfirmActionPerformed

    private int findRealQuantityOfGoods(int goodsID){
        int quantity = 0;
        for(Goods tempGoods : goods){
            if(goodsID == tempGoods.getId()){
                quantity = tempGoods.getQuantity();
            }
        }
        return quantity;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnConfirm;
    private javax.swing.JComboBox<String> cmbCustomer;
    private javax.swing.JComboBox<String> cmbShipper;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCustomerEmail;
    private javax.swing.JLabel lblCustomerName;
    private javax.swing.JLabel lblCustomerPhone;
    private javax.swing.JLabel lblCustomerWarning;
    private javax.swing.JLabel lblGoodsQuantityWarning;
    private javax.swing.JLabel lblShipperEmail;
    private javax.swing.JLabel lblShipperName;
    private javax.swing.JLabel lblShipperPhone;
    private javax.swing.JLabel lblShipperWarning;
    private javax.swing.JTable tableGoods;
    // End of variables declaration//GEN-END:variables
}
